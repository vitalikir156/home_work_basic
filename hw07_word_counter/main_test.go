package main

import (
	"testing"

	"github.com/stretchr/testify/require"
)

func TestCountWords(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected map[string]int
	}{
		{"one", `Порядок чтения ключей из словаря не определён (случаен, может меняться в разных
			версиях Го).
			Что будет, если удалить ключ во время итерирования?
			Что будет, если добавить ключ во время итерирования?
			Менять коллекцию во время её итерирования — плохая идея!`, map[string]int{
			"будет": 2, "в": 1, "версиях": 1, "во": 3, "время": 3,
			"го": 1, "добавить": 1, "если": 2, "её": 1, "идея": 1, "из": 1,
			"итерирования": 3, "ключ": 2, "ключей": 1, "коллекцию": 1, "менять": 1,
			"меняться": 1, "может": 1, "не": 1, "определён": 1, "плохая": 1,
			"порядок": 1, "разных": 1, "словаря": 1, "случаен": 1, "удалить": 1,
			"чтения": 1, "что": 2,
		}},
		{"two", `Но потом я видимо отсоединил желтый проводок от массы, 
		сам того не ведая что будет. Пока тестировал, катался на оборотах до 2000,
		 все было пучком, естественно. Но когда решил пожарить, то зуммер сказал "стопэ, товарищ! 
		 з-з-зззз, тпру!". Я жэ, конечно обрадовался этому событию, так как опять что-то новое, что-то
		  в чем надо разобраться.`, map[string]int{
			"будет": 1, "было": 1, "в": 1, "ведая": 1,
			"видимо": 1, "все": 1, "до": 1, "естественно": 1, "желтый": 1, "жэ": 1, "зззззз": 1,
			"зуммер": 1, "как": 1, "катался": 1, "когда": 1, "конечно": 1, "массы": 1, "на": 1,
			"надо": 1, "не": 1, "но": 2, "новое": 1, "оборотах": 1, "обрадовался": 1, "опять": 1,
			"от": 1, "отсоединил": 1, "пожарить": 1, "пока": 1, "потом": 1, "проводок": 1, "пучком": 1,
			"разобраться": 1, "решил": 1, "сам": 1, "сказал": 1, "событию": 1, "стопэ": 1, "так": 1,
			"тестировал": 1, "то": 1, "товарищ": 1, "того": 1, "тпру": 1, "чем": 1, "что": 1, "чтото": 2,
			"этому": 1, "я": 2,
		}},
	}

	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			got := CountWords(tc.input)
			require.Equal(t, tc.expected, got)
		})
	}
}
