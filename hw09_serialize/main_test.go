package main

import (
	"testing"

	"github.com/stretchr/testify/require"
)

func TestMarshalGood(t *testing.T) {
	tests := []struct {
		name     string
		input    Book
		expected []byte
	}{
		{"1", Book{1, "title1", "author", 1991, 12, 4}, []byte{
			0x7b,
			0x22, 0x69, 0x64, 0x22, 0x3a, 0x31, 0x2c, 0x22, 0x74, 0x69,
			0x74, 0x6c, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x69, 0x74, 0x6c,
			0x65, 0x31, 0x22, 0x2c, 0x22, 0x61, 0x75, 0x74, 0x68,
			0x6f, 0x72, 0x22, 0x3a, 0x22, 0x61, 0x75, 0x74, 0x68,
			0x6f, 0x72, 0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72,
			0x22, 0x3a, 0x31, 0x39, 0x39, 0x31, 0x2c, 0x22, 0x73,
			0x69, 0x7a, 0x65, 0x22, 0x3a, 0x31, 0x32, 0x2c, 0x22,
			0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x34, 0x7d,
		}},
		{"2", Book{5673, "title6", "author4", 1891, 913, 2.7}, []byte{
			0x7b,
			0x22, 0x69, 0x64, 0x22, 0x3a, 0x35, 0x36, 0x37, 0x33, 0x2c, 0x22,
			0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x69, 0x74,
			0x6c, 0x65, 0x36, 0x22, 0x2c, 0x22, 0x61, 0x75, 0x74, 0x68, 0x6f,
			0x72, 0x22, 0x3a, 0x22, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x34,
			0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72, 0x22, 0x3a, 0x31, 0x38,
			0x39, 0x31, 0x2c, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x3a, 0x39,
			0x31, 0x33, 0x2c, 0x22, 0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x32,
			0x2e, 0x37, 0x7d,
		}},
		{"3", Book{5789, "title15", "author48", 2048, 0.6, 5}, []byte{
			0x7b,
			0x22, 0x69, 0x64, 0x22, 0x3a, 0x35, 0x37, 0x38, 0x39, 0x2c, 0x22,
			0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x69, 0x74,
			0x6c, 0x65, 0x31, 0x35, 0x22, 0x2c, 0x22, 0x61, 0x75, 0x74, 0x68,
			0x6f, 0x72, 0x22, 0x3a, 0x22, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
			0x34, 0x38, 0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72, 0x22, 0x3a,
			0x32, 0x30, 0x34, 0x38, 0x2c, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x22,
			0x3a, 0x30, 0x2e, 0x36, 0x2c, 0x22, 0x72, 0x61, 0x74, 0x65, 0x22,
			0x3a, 0x35, 0x7d,
		}},
	}
	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			got, err := tc.input.MarshalJSON()
			require.NoError(t, err)
			require.Equal(t, tc.expected, got)
		})
	}
}

func TestUnmarshalGood(t *testing.T) {
	tests := []struct {
		name     string
		expected Book
		input    []byte
	}{
		{"1", Book{1, "title1", "author", 1991, 12, 4}, []byte{
			0x7b,
			0x22, 0x69, 0x64, 0x22, 0x3a, 0x31, 0x2c, 0x22, 0x74, 0x69,
			0x74, 0x6c, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x69, 0x74, 0x6c,
			0x65, 0x31, 0x22, 0x2c, 0x22, 0x61, 0x75, 0x74, 0x68,
			0x6f, 0x72, 0x22, 0x3a, 0x22, 0x61, 0x75, 0x74, 0x68,
			0x6f, 0x72, 0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72,
			0x22, 0x3a, 0x31, 0x39, 0x39, 0x31, 0x2c, 0x22, 0x73,
			0x69, 0x7a, 0x65, 0x22, 0x3a, 0x31, 0x32, 0x2c, 0x22,
			0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x34, 0x7d,
		}},
		{"2", Book{5673, "title6", "author4", 1891, 913, 2.7}, []byte{
			0x7b,
			0x22, 0x69, 0x64, 0x22, 0x3a, 0x35, 0x36, 0x37, 0x33, 0x2c, 0x22,
			0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x69, 0x74,
			0x6c, 0x65, 0x36, 0x22, 0x2c, 0x22, 0x61, 0x75, 0x74, 0x68, 0x6f,
			0x72, 0x22, 0x3a, 0x22, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x34,
			0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72, 0x22, 0x3a, 0x31, 0x38,
			0x39, 0x31, 0x2c, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x3a, 0x39,
			0x31, 0x33, 0x2c, 0x22, 0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x32,
			0x2e, 0x37, 0x7d,
		}},
		{"3", Book{5789, "title15", "author48", 2048, 0.6, 5}, []byte{
			0x7b,
			0x22, 0x69, 0x64, 0x22, 0x3a, 0x35, 0x37, 0x38, 0x39, 0x2c, 0x22,
			0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x69, 0x74,
			0x6c, 0x65, 0x31, 0x35, 0x22, 0x2c, 0x22, 0x61, 0x75, 0x74, 0x68,
			0x6f, 0x72, 0x22, 0x3a, 0x22, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
			0x34, 0x38, 0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72, 0x22, 0x3a,
			0x32, 0x30, 0x34, 0x38, 0x2c, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x22,
			0x3a, 0x30, 0x2e, 0x36, 0x2c, 0x22, 0x72, 0x61, 0x74, 0x65, 0x22,
			0x3a, 0x35, 0x7d,
		}},
	}
	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			var got Book
			err := got.UnmarshalJSON(tc.input)
			require.NoError(t, err)
			require.Equal(t, tc.expected, got)
		})
	}
}

func TestMarshalSliceGood(t *testing.T) {
	tests := []struct {
		name     string
		input    []Book
		expected []byte
	}{
		{
			"1",
			[]Book{{1, "title1", "author", 1991, 12, 4}, {5673, "title6", "author4", 1891, 913, 2.7}},
			[]byte{
				0x5b, 0x7b, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x31, 0x2c, 0x22, 0x74, 0x69, 0x74,
				0x6c, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x31, 0x22, 0x2c,
				0x22, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x3a, 0x22, 0x61, 0x75, 0x74,
				0x68, 0x6f, 0x72, 0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72, 0x22, 0x3a, 0x31,
				0x39, 0x39, 0x31, 0x2c, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x3a, 0x31, 0x32,
				0x2c, 0x22, 0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x34, 0x7d, 0x2c, 0x7b, 0x22,
				0x69, 0x64, 0x22, 0x3a, 0x35, 0x36, 0x37, 0x33, 0x2c, 0x22, 0x74, 0x69, 0x74,
				0x6c, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x36, 0x22, 0x2c,
				0x22, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x3a, 0x22, 0x61, 0x75, 0x74,
				0x68, 0x6f, 0x72, 0x34, 0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72, 0x22, 0x3a,
				0x31, 0x38, 0x39, 0x31, 0x2c, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x3a, 0x39,
				0x31, 0x33, 0x2c, 0x22, 0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x32, 0x2e, 0x37,
				0x7d, 0x5d,
			},
		},
	}
	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			got, err := MarshalSlice(tc.input)
			require.NoError(t, err)
			require.Equal(t, tc.expected, got)
		})
	}
}

func TestUnmarshalSliceGood(t *testing.T) {
	tests := []struct {
		name     string
		expected []Book
		input    []byte
	}{
		{
			"1",
			[]Book{{1, "title1", "author", 1991, 12, 4}, {5673, "title6", "author4", 1891, 913, 2.7}},
			[]byte{
				0x5b, 0x7b, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x31, 0x2c, 0x22, 0x74, 0x69, 0x74,
				0x6c, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x31, 0x22, 0x2c,
				0x22, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x3a, 0x22, 0x61, 0x75, 0x74,
				0x68, 0x6f, 0x72, 0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72, 0x22, 0x3a, 0x31,
				0x39, 0x39, 0x31, 0x2c, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x3a, 0x31, 0x32,
				0x2c, 0x22, 0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x34, 0x7d, 0x2c, 0x7b, 0x22,
				0x69, 0x64, 0x22, 0x3a, 0x35, 0x36, 0x37, 0x33, 0x2c, 0x22, 0x74, 0x69, 0x74,
				0x6c, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x36, 0x22, 0x2c,
				0x22, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x3a, 0x22, 0x61, 0x75, 0x74,
				0x68, 0x6f, 0x72, 0x34, 0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72, 0x22, 0x3a,
				0x31, 0x38, 0x39, 0x31, 0x2c, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x3a, 0x39,
				0x31, 0x33, 0x2c, 0x22, 0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x32, 0x2e, 0x37,
				0x7d, 0x5d,
			},
		},
	}
	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			got, err := UnmarshalSlice(tc.input)
			require.NoError(t, err)
			require.Equal(t, tc.expected, got)
		})
	}
}

func TestUnmarshalBad(t *testing.T) {
	tests := []struct {
		name     string
		expected Book
		input    []byte
	}{
		{"1", Book{1, "title1", "author", 1991, 12, 4}, []byte{
			0x7b,
			0x22, 0x69, 0x64, 0x22, 0x3a, 0x31, 0x2c, 0x22, 0x74, 0x69,
			0x74, 0x6c, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x69, 0x74, 0x6c,
			0x65, 0x31, 0x22, 0x2c, 0x22, 0x61, 0x75, 0x74, 0x68,
			0x6f, 0x22, 0x22, 0x3a, 0x22, 0x61, 0x75, 0x74, 0x68,
			0x6f, 0x72, 0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72,
			0x22, 0x3a, 0x31, 0x39, 0x39, 0x31, 0x2c, 0x22, 0x73,
			0x69, 0x7a, 0x65, 0x22, 0x3a, 0x31, 0x32, 0x2c, 0x22,
			0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x34, 0x7d,
		}},
		{"2", Book{5673, "title6", "author4", 1891, 913, 2.7}, []byte{
			0x7b,
			0x22, 0x69, 0x64, 0x12, 0x3a, 0x35, 0x36, 0x37, 0x33, 0x2c, 0x22,
			0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x69, 0x74,
			0x6c, 0x65, 0x86, 0x22, 0x2c, 0x22, 0x61, 0x75, 0x74, 0x68, 0x6f,
			0x72, 0x22, 0x3a, 0x22, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x34,
			0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72, 0x22, 0x3a, 0x31, 0x38,
			0x39, 0x31, 0x2c, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x3a, 0x39,
			0x31, 0x33, 0x2c, 0x22, 0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x32,
			0x2e, 0x37, 0x7d,
		}},
		{"3", Book{5789, "title15", "author48", 2048, 0.6, 5}, []byte{
			0x7b,
			0x22, 0x19, 0x64, 0x22, 0x3a, 0x35, 0x37, 0x38, 0x39, 0x2c, 0x22,
			0x74, 0x69, 0x74, 0x6c, 0x65,
		}},
	}
	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			var got Book
			err := got.UnmarshalJSON(tc.input)
			require.Error(t, err)
		})
	}
}

func TestUnmarshalSliceBad(t *testing.T) {
	tests := []struct {
		name     string
		expected []Book
		input    []byte
	}{
		{
			"1",
			[]Book{{1, "title1", "author", 1991, 12, 4}, {5673, "title6", "author4", 1891, 913, 2.7}},
			[]byte{
				0x5b, 0x7a, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x31, 0x2c, 0x22, 0x74, 0x69, 0x74,
				0x6c, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x31, 0x22, 0x2c,
				0x22, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x3a, 0x22, 0x61, 0x75, 0x74,
				0x68, 0x6f, 0x72, 0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72, 0x22, 0x3a, 0x31,
				0x39, 0x39, 0x31, 0x2c, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x3a, 0x31, 0x32,
				0x2c, 0x22, 0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x34, 0x7d, 0x2c, 0x7b, 0x22,
				0x69, 0x64, 0x22, 0x3a, 0x35, 0x36, 0x37, 0x33, 0x2c, 0x22, 0x74, 0x69, 0x74,
				0x6c, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x36, 0x22, 0x2c,
				0x22, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x3a, 0x22, 0x61, 0x75, 0x74,
				0x68, 0x6f, 0x72, 0x34, 0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72, 0x22, 0x3a,
				0x31, 0x38, 0x39, 0x31,
			},
		},
	}
	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			_, err := UnmarshalSlice(tc.input)
			require.Error(t, err)
		})
	}
}
