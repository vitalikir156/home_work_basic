package main

import (
	"testing"

	"github.com/stretchr/testify/require"
	pb "github.com/vitalikir156/home_work_basic/hw09_serialize/book"
	"google.golang.org/protobuf/proto"
)

func TestMarshalGood(t *testing.T) {
	tests := []struct {
		name     string
		input    Book
		expected []byte
	}{
		{"1", Book{1, "title1", "author", 1991, 12, 4}, []byte{
			0x7b,
			0x22, 0x69, 0x64, 0x22, 0x3a, 0x31, 0x2c, 0x22, 0x74, 0x69,
			0x74, 0x6c, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x69, 0x74, 0x6c,
			0x65, 0x31, 0x22, 0x2c, 0x22, 0x61, 0x75, 0x74, 0x68,
			0x6f, 0x72, 0x22, 0x3a, 0x22, 0x61, 0x75, 0x74, 0x68,
			0x6f, 0x72, 0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72,
			0x22, 0x3a, 0x31, 0x39, 0x39, 0x31, 0x2c, 0x22, 0x73,
			0x69, 0x7a, 0x65, 0x22, 0x3a, 0x31, 0x32, 0x2c, 0x22,
			0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x34, 0x7d,
		}},
		{"2", Book{5673, "title6", "author4", 1891, 913, 2.7}, []byte{
			0x7b,
			0x22, 0x69, 0x64, 0x22, 0x3a, 0x35, 0x36, 0x37, 0x33, 0x2c, 0x22,
			0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x69, 0x74,
			0x6c, 0x65, 0x36, 0x22, 0x2c, 0x22, 0x61, 0x75, 0x74, 0x68, 0x6f,
			0x72, 0x22, 0x3a, 0x22, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x34,
			0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72, 0x22, 0x3a, 0x31, 0x38,
			0x39, 0x31, 0x2c, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x3a, 0x39,
			0x31, 0x33, 0x2c, 0x22, 0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x32,
			0x2e, 0x37, 0x7d,
		}},
		{"3", Book{5789, "title15", "author48", 2048, 0.6, 5}, []byte{
			0x7b,
			0x22, 0x69, 0x64, 0x22, 0x3a, 0x35, 0x37, 0x38, 0x39, 0x2c, 0x22,
			0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x69, 0x74,
			0x6c, 0x65, 0x31, 0x35, 0x22, 0x2c, 0x22, 0x61, 0x75, 0x74, 0x68,
			0x6f, 0x72, 0x22, 0x3a, 0x22, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
			0x34, 0x38, 0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72, 0x22, 0x3a,
			0x32, 0x30, 0x34, 0x38, 0x2c, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x22,
			0x3a, 0x30, 0x2e, 0x36, 0x2c, 0x22, 0x72, 0x61, 0x74, 0x65, 0x22,
			0x3a, 0x35, 0x7d,
		}},
	}
	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			got, err := tc.input.MarshalJSON()
			require.NoError(t, err)
			require.Equal(t, tc.expected, got)
		})
	}
}

func TestUnmarshalGood(t *testing.T) {
	tests := []struct {
		name     string
		expected Book
		input    []byte
	}{
		{"1", Book{1, "title1", "author", 1991, 12, 4}, []byte{
			0x7b,
			0x22, 0x69, 0x64, 0x22, 0x3a, 0x31, 0x2c, 0x22, 0x74, 0x69,
			0x74, 0x6c, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x69, 0x74, 0x6c,
			0x65, 0x31, 0x22, 0x2c, 0x22, 0x61, 0x75, 0x74, 0x68,
			0x6f, 0x72, 0x22, 0x3a, 0x22, 0x61, 0x75, 0x74, 0x68,
			0x6f, 0x72, 0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72,
			0x22, 0x3a, 0x31, 0x39, 0x39, 0x31, 0x2c, 0x22, 0x73,
			0x69, 0x7a, 0x65, 0x22, 0x3a, 0x31, 0x32, 0x2c, 0x22,
			0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x34, 0x7d,
		}},
		{"2", Book{5673, "title6", "author4", 1891, 913, 2.7}, []byte{
			0x7b,
			0x22, 0x69, 0x64, 0x22, 0x3a, 0x35, 0x36, 0x37, 0x33, 0x2c, 0x22,
			0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x69, 0x74,
			0x6c, 0x65, 0x36, 0x22, 0x2c, 0x22, 0x61, 0x75, 0x74, 0x68, 0x6f,
			0x72, 0x22, 0x3a, 0x22, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x34,
			0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72, 0x22, 0x3a, 0x31, 0x38,
			0x39, 0x31, 0x2c, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x3a, 0x39,
			0x31, 0x33, 0x2c, 0x22, 0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x32,
			0x2e, 0x37, 0x7d,
		}},
		{"3", Book{5789, "title15", "author48", 2048, 0.6, 5}, []byte{
			0x7b,
			0x22, 0x69, 0x64, 0x22, 0x3a, 0x35, 0x37, 0x38, 0x39, 0x2c, 0x22,
			0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x69, 0x74,
			0x6c, 0x65, 0x31, 0x35, 0x22, 0x2c, 0x22, 0x61, 0x75, 0x74, 0x68,
			0x6f, 0x72, 0x22, 0x3a, 0x22, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
			0x34, 0x38, 0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72, 0x22, 0x3a,
			0x32, 0x30, 0x34, 0x38, 0x2c, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x22,
			0x3a, 0x30, 0x2e, 0x36, 0x2c, 0x22, 0x72, 0x61, 0x74, 0x65, 0x22,
			0x3a, 0x35, 0x7d,
		}},
	}
	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			var got Book
			err := got.UnmarshalJSON(tc.input)
			require.NoError(t, err)
			require.Equal(t, tc.expected, got)
		})
	}
}

func TestMarshalSliceGood(t *testing.T) {
	tests := []struct {
		name     string
		input    []Book
		expected []byte
	}{
		{
			"1",
			[]Book{{1, "title1", "author", 1991, 12, 4}, {5673, "title6", "author4", 1891, 913, 2.7}},
			[]byte{
				0x5b, 0x7b, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x31, 0x2c, 0x22, 0x74, 0x69, 0x74,
				0x6c, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x31, 0x22, 0x2c,
				0x22, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x3a, 0x22, 0x61, 0x75, 0x74,
				0x68, 0x6f, 0x72, 0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72, 0x22, 0x3a, 0x31,
				0x39, 0x39, 0x31, 0x2c, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x3a, 0x31, 0x32,
				0x2c, 0x22, 0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x34, 0x7d, 0x2c, 0x7b, 0x22,
				0x69, 0x64, 0x22, 0x3a, 0x35, 0x36, 0x37, 0x33, 0x2c, 0x22, 0x74, 0x69, 0x74,
				0x6c, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x36, 0x22, 0x2c,
				0x22, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x3a, 0x22, 0x61, 0x75, 0x74,
				0x68, 0x6f, 0x72, 0x34, 0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72, 0x22, 0x3a,
				0x31, 0x38, 0x39, 0x31, 0x2c, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x3a, 0x39,
				0x31, 0x33, 0x2c, 0x22, 0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x32, 0x2e, 0x37,
				0x7d, 0x5d,
			},
		},
	}
	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			got, err := MarshalSlice(tc.input)
			require.NoError(t, err)
			require.Equal(t, tc.expected, got)
		})
	}
}

func TestUnmarshalSliceGood(t *testing.T) {
	tests := []struct {
		name     string
		expected []Book
		input    []byte
	}{
		{
			"1",
			[]Book{{1, "title1", "author", 1991, 12, 4}, {5673, "title6", "author4", 1891, 913, 2.7}},
			[]byte{
				0x5b, 0x7b, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x31, 0x2c, 0x22, 0x74, 0x69, 0x74,
				0x6c, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x31, 0x22, 0x2c,
				0x22, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x3a, 0x22, 0x61, 0x75, 0x74,
				0x68, 0x6f, 0x72, 0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72, 0x22, 0x3a, 0x31,
				0x39, 0x39, 0x31, 0x2c, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x3a, 0x31, 0x32,
				0x2c, 0x22, 0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x34, 0x7d, 0x2c, 0x7b, 0x22,
				0x69, 0x64, 0x22, 0x3a, 0x35, 0x36, 0x37, 0x33, 0x2c, 0x22, 0x74, 0x69, 0x74,
				0x6c, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x36, 0x22, 0x2c,
				0x22, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x3a, 0x22, 0x61, 0x75, 0x74,
				0x68, 0x6f, 0x72, 0x34, 0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72, 0x22, 0x3a,
				0x31, 0x38, 0x39, 0x31, 0x2c, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x3a, 0x39,
				0x31, 0x33, 0x2c, 0x22, 0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x32, 0x2e, 0x37,
				0x7d, 0x5d,
			},
		},
	}
	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			got, err := UnmarshalSlice(tc.input)
			require.NoError(t, err)
			require.Equal(t, tc.expected, got)
		})
	}
}

func TestUnmarshalBad(t *testing.T) {
	tests := []struct {
		name     string
		expected Book
		input    []byte
	}{
		{"1", Book{1, "title1", "author", 1991, 12, 4}, []byte{
			0x7b,
			0x22, 0x69, 0x64, 0x22, 0x3a, 0x31, 0x2c, 0x22, 0x74, 0x69,
			0x74, 0x6c, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x69, 0x74, 0x6c,
			0x65, 0x31, 0x22, 0x2c, 0x22, 0x61, 0x75, 0x74, 0x68,
			0x6f, 0x22, 0x22, 0x3a, 0x22, 0x61, 0x75, 0x74, 0x68,
			0x6f, 0x72, 0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72,
			0x22, 0x3a, 0x31, 0x39, 0x39, 0x31, 0x2c, 0x22, 0x73,
			0x69, 0x7a, 0x65, 0x22, 0x3a, 0x31, 0x32, 0x2c, 0x22,
			0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x34, 0x7d,
		}},
		{"2", Book{5673, "title6", "author4", 1891, 913, 2.7}, []byte{
			0x7b,
			0x22, 0x69, 0x64, 0x12, 0x3a, 0x35, 0x36, 0x37, 0x33, 0x2c, 0x22,
			0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x69, 0x74,
			0x6c, 0x65, 0x86, 0x22, 0x2c, 0x22, 0x61, 0x75, 0x74, 0x68, 0x6f,
			0x72, 0x22, 0x3a, 0x22, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x34,
			0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72, 0x22, 0x3a, 0x31, 0x38,
			0x39, 0x31, 0x2c, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x3a, 0x39,
			0x31, 0x33, 0x2c, 0x22, 0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x32,
			0x2e, 0x37, 0x7d,
		}},
		{"3", Book{5789, "title15", "author48", 2048, 0.6, 5}, []byte{
			0x7b,
			0x22, 0x19, 0x64, 0x22, 0x3a, 0x35, 0x37, 0x38, 0x39, 0x2c, 0x22,
			0x74, 0x69, 0x74, 0x6c, 0x65,
		}},
	}
	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			var got Book
			err := got.UnmarshalJSON(tc.input)
			require.Error(t, err)
		})
	}
}

func TestUnmarshalSliceBad(t *testing.T) {
	tests := []struct {
		name     string
		expected []Book
		input    []byte
	}{
		{
			"1",
			[]Book{{1, "title1", "author", 1991, 12, 4}, {5673, "title6", "author4", 1891, 913, 2.7}},
			[]byte{
				0x5b, 0x7a, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x31, 0x2c, 0x22, 0x74, 0x69, 0x74,
				0x6c, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x31, 0x22, 0x2c,
				0x22, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x3a, 0x22, 0x61, 0x75, 0x74,
				0x68, 0x6f, 0x72, 0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72, 0x22, 0x3a, 0x31,
				0x39, 0x39, 0x31, 0x2c, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x3a, 0x31, 0x32,
				0x2c, 0x22, 0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x34, 0x7d, 0x2c, 0x7b, 0x22,
				0x69, 0x64, 0x22, 0x3a, 0x35, 0x36, 0x37, 0x33, 0x2c, 0x22, 0x74, 0x69, 0x74,
				0x6c, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x36, 0x22, 0x2c,
				0x22, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x3a, 0x22, 0x61, 0x75, 0x74,
				0x68, 0x6f, 0x72, 0x34, 0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72, 0x22, 0x3a,
				0x31, 0x38, 0x39, 0x31,
			},
		},
	}
	for _, tc := range tests {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			_, err := UnmarshalSlice(tc.input)
			require.Error(t, err)
		})
	}
}

func TestPbMarshallGood(t *testing.T) {
	pbook := &pb.Book{
		Id:     3,
		Title:  "title1",
		Author: "author",
		Year:   1991,
		Size:   12,
		Rate:   4,
	}
	data, err := proto.Marshal(pbook)
	require.NoError(t, err)
	require.Equal(t, data, []byte{
		0x8, 0x6, 0x12, 0x6, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x31,
		0x1a, 0x6, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x20, 0x8e, 0x1f, 0x2d, 0x0, 0x0,
		0x40, 0x41, 0x35, 0x0, 0x0, 0x80, 0x40,
	})
}

func TestPbUnmarshallGood(t *testing.T) {
	book := &pb.Book{}
	err := proto.Unmarshal([]byte{
		0x8, 0x6, 0x12, 0x6, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x31,
		0x1a, 0x6, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x20, 0x8e, 0x1f, 0x2d, 0x0, 0x0,
		0x40, 0x41, 0x35, 0x0, 0x0, 0x80, 0x40,
	}, book)
	require.NoError(t, err)
	s := pb.Book{
		Id:     3,
		Title:  "title1",
		Author: "author",
		Year:   1991,
		Size:   12,
		Rate:   4,
	}
	require.Equal(t, book.Id, s.Id)
	require.Equal(t, book.Title, s.Title)
	require.Equal(t, book.Author, s.Author)
	require.Equal(t, book.Year, s.Year)
	require.Equal(t, book.Size, s.Size)
	require.Equal(t, book.Rate, s.Rate)
}

func TestPbSliceMarshalGood(t *testing.T) {
	slpbook := &pb.Books{Books: []*pb.Book{
		{
			Id:     3,
			Title:  "title1",
			Author: "author",
			Year:   1991,
			Size:   12,
			Rate:   4,
		},
		{
			Id:     3,
			Title:  "title1",
			Author: "author",
			Year:   1991,
			Size:   12,
			Rate:   4,
		},
		{
			Id:     4,
			Title:  "title4",
			Author: "author5",
			Year:   19916,
			Size:   123,
			Rate:   1,
		},
	}}
	data, err := proto.Marshal(slpbook)
	require.NoError(t, err)
	require.Equal(t, data, []byte{
		0xa, 0x1f, 0x8, 0x6, 0x12, 0x6, 0x74, 0x69, 0x74, 0x6c, 0x65,
		0x31, 0x1a, 0x6, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x20, 0x8e, 0x1f, 0x2d, 0x0, 0x0,
		0x40, 0x41, 0x35, 0x0, 0x0, 0x80, 0x40, 0xa, 0x1f, 0x8, 0x6, 0x12, 0x6, 0x74, 0x69, 0x74,
		0x6c, 0x65, 0x31, 0x1a, 0x6, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x20, 0x8e, 0x1f, 0x2d,
		0x0, 0x0, 0x40, 0x41, 0x35, 0x0, 0x0, 0x80, 0x40, 0xa, 0x21, 0x8, 0x8, 0x12, 0x6, 0x74, 0x69,
		0x74, 0x6c, 0x65, 0x34, 0x1a, 0x7, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x35, 0x20, 0x98, 0xb7,
		0x2, 0x2d, 0x0, 0x0, 0xf6, 0x42, 0x35, 0x0, 0x0, 0x80, 0x3f,
	})
}

func TestPbSliceUnmarshalGood(t *testing.T) {
	data := &pb.Books{Books: []*pb.Book{{}}}
	err := proto.Unmarshal([]byte{
		0xa, 0x1f, 0x8, 0x6, 0x12, 0x6, 0x74, 0x69, 0x74, 0x6c,
		0x65, 0x31, 0x1a, 0x6, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x20, 0x8e, 0x1f, 0x2d,
		0x0, 0x0, 0x40, 0x41, 0x35, 0x0, 0x0, 0x80, 0x40, 0xa, 0x21, 0x8, 0x8, 0x12, 0x6,
		0x74, 0x69, 0x74, 0x6c, 0x65, 0x34, 0x1a, 0x7, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
		0x35, 0x20, 0x98, 0xb7, 0x2, 0x2d, 0x0, 0x0, 0xf6, 0x42, 0x35, 0x0, 0x0, 0x80, 0x3f,
	}, data)
	require.NoError(t, err)
	s := data.GetBooks()
	e := pb.Books{Books: []*pb.Book{
		{
			Id:     3,
			Title:  "title1",
			Author: "author",
			Year:   1991,
			Size:   12,
			Rate:   4,
		},
		{
			Id:     4,
			Title:  "title4",
			Author: "author5",
			Year:   19916,
			Size:   123,
			Rate:   1,
		},
	}}
	require.Equal(t, s[1].Author, e.Books[1].Author)
	require.Equal(t, s[1].Title, e.Books[1].Title)
	require.Equal(t, s[1].Id, e.Books[1].Id)
	require.Equal(t, s[1].Year, e.Books[1].Year)
	require.Equal(t, s[1].Size, e.Books[1].Size)
	require.Equal(t, s[1].Rate, e.Books[1].Rate)
	require.Equal(t, s[0].Author, e.Books[0].Author)
	require.Equal(t, s[0].Title, e.Books[0].Title)
	require.Equal(t, s[0].Id, e.Books[0].Id)
	require.Equal(t, s[0].Year, e.Books[0].Year)
	require.Equal(t, s[0].Size, e.Books[0].Size)
	require.Equal(t, s[0].Rate, e.Books[0].Rate)
}
